{"version":3,"sources":["assets/svg/logo_01.svg","pages/oops/Oops.js","pages/login/Login.js","components/header/Header.js","components/sidebar/Sidebar.js","pages/painel/Painel.js","routes.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Oops","className","src","logo","alt","Login","TextField","required","id","label","variant","type","to","Button","color","Header","AppBar","position","Toolbar","Sidebar","Drawer","List","map","text","index","ListItem","button","key","ListItemText","primary","Painel","CssBaseline","Routes","exact","path","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","props","doc","collection","get","state","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,ySCM5BC,G,MAFF,kBAAK,yBAAKC,UAAU,QAAO,yBAAKC,IAAKC,IAAMC,IAAI,SAAS,gE,0BCyBtDC,EAtBD,kBAAM,yBAAKJ,UAAU,SAC/B,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,kBAACE,EAAA,EAAD,CACIC,UAAQ,EACRC,GAAG,eACHC,MAAM,QACNC,QAAQ,WAEZ,kBAACJ,EAAA,EAAD,CACIC,UAAQ,EACRC,GAAG,eACHG,KAAK,WACLF,MAAM,QACNC,QAAQ,WAEZ,kBAAC,IAAD,CAAME,GAAG,UACL,kBAACC,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,WAAlC,a,mCCZOC,EARA,kBACX,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,sB,oCCUOC,EAZC,kBACZ,kBAACC,EAAA,EAAD,CAAQV,QAAQ,aACZ,kBAACW,EAAA,EAAD,KACK,CAAC,YAAY,SAAS,UAAUC,KAAI,SAACC,EAAKC,GAAN,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GAClB,kBAACK,EAAA,EAAD,CAAcC,QAASN,WCI5BO,EANA,kBAAK,6BAChB,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCOWC,EAVA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,UAAW,kBAAM,kBAAC,EAAD,SAC7C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,UAAW,kBAAM,kBAAC,EAAD,Y,iBCMtCC,G,MAFJC,IAASC,cAXC,CACnBC,OAAQ,0CACRC,WAAY,yBACZC,YAAa,gCACbC,UAAW,SACXC,cAAe,qBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGiCC,aCKrCC,G,kBAdX,WAAYC,GAAQ,IAAD,sBACf,4CAAMA,IACN,IAAMC,EAAMd,EAAGe,WAAW,eAAeD,IAAI,eAAeE,MAF7C,OAGf,EAAKC,MAAQH,EACbI,QAAQC,IAAI,EAAKF,OAJF,E,sEAQf,OAAQ,yBAAKpD,UAAU,OACnB,kBAAC,EAAD,W,GAVMuD,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df723164.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_01.89e637f3.svg\";","import React from 'react';\nimport logo from '../../assets/svg/logo_01.svg';\nimport './Oops.css';\n\nconst Oops = () =><div className=\"Oops\"><img src={logo} alt=\"logo\" /><h1>Página em Construção</h1></div>\n\nexport default Oops;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport logo from '../../assets/svg/logo_01.svg';\nimport './Login.css';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst Login = () => <div className=\"Login\">\n    <img src={logo} alt=\"logo\" />\n    <TextField\n        required\n        id=\"filled-basic\"\n        label=\"login\"\n        variant=\"filled\"\n    />\n    <TextField\n        required\n        id=\"filled-basic\"\n        type=\"password\"\n        label=\"senha\"\n        variant=\"filled\"\n    />\n    <Link to=\"painel\">\n        <Button variant=\"contained\" color=\"primary\">Entrar</Button>\n    </Link>\n\n</div>\n\n\nexport default Login;","import React from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core';\n\nconst Header = ()=>(\n    <AppBar position=\"fixed\">\n        <Toolbar>\n            Health-Plus\n        </Toolbar>\n    </AppBar>\n);\n\nexport default Header;","import React from 'react';\nimport { Drawer, List, ListItem, ListItemText } from '@material-ui/core';\n\nconst Sidebar = () => (\n    <Drawer variant=\"permanent\">\n        <List>\n            {['Pacientes','Exames','Laudos'].map((text,index)=>(\n                <ListItem button key={text}>\n                    <ListItemText primary={text}/>\n                </ListItem>\n            ))}\n        </List>\n    </Drawer>\n);\n\nexport default Sidebar;","import React from 'react';\nimport './painel.css';\nimport {CssBaseline } from '@material-ui/core';\nimport Header from '../../components/header/Header';\nimport Sidebar from '../../components/sidebar/Sidebar';\n\nconst Painel = () =><div >\n    <CssBaseline/>\n    <Header />\n    <Sidebar />\n</div>\n\nexport default Painel;\n","import React from 'react';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\nimport Oops from './pages/oops/Oops';\nimport Login from './pages/login/Login';\nimport Painel from './pages/painel/Painel';\n\nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={() => <Login/>}/>\n            <Route exact path=\"/painel\" component={() => <Painel/>}/>\n            <Route exact path=\"/oops\" component={() => <Oops/>}/>\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Routes;","import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBjxyAhs4N7pr1u-0sRU3wXlSoIcTtSSlw\",\n    authDomain: \"cancio.firebaseapp.com\",\n    databaseURL: \"https://cancio.firebaseio.com\",\n    projectId: \"cancio\",\n    storageBucket: \"cancio.appspot.com\",\n    messagingSenderId: \"1015765474594\",\n    appId: \"1:1015765474594:web:f76dc6b3cebba6050c997b\",\n    measurementId: \"G-CELG2M1R1Z\"\n  };\n\n  const db = firebase.initializeApp(firebaseConfig).firestore();\n\n  export default db","import React from 'react';\nimport Routes from './routes';\nimport db from './firebase'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        const doc = db.collection('health-plus').doc('health-plus').get()\n        this.state = doc\n        console.log(this.state)\n    }\n    \n    render() {\n        return (<div className=\"App\">\n            <Routes />\n        </div>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}